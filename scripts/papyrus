#!/usr/bin/env python
"""
Usage:
    papyrus generate <ACCOUNT_TYPE> [--address=<FILE>] [--output=<FILE>] [--qrcode] [--testnet]
    papyrus recover (--key=<STRING> | [-] | <ENCRYPTED_KEY_FILE>)
                    ([--stdout --qrcode] | <DECRYPTED_KEY_FILE>)
    papyrus qrcode ([-] | <FILE>) (--output=<FILE> | --qrcode)
    papyrus --version
    papyrus --help

Arguments:
    <ACCOUNT_TYPE>        type of account (ethereum or bitcoin)
    <FILE>                specify the path to a file
                          (using a .png extension will treat the file as a qrcode, ascii otherwise)
    <STRING>              ascii string containing an encrypted key
    <ENCRYPTED_KEY_FILE>  path to file containing encrypted key
                          use a single '-' to accept data through stdin
    <DECRYPTED_KEY_FILE>  path to file for outputting decrypted key

Options:
    -a --address=<FILE>  file to be used for generated address
    -o --output=<FILE>   file to be used for outputted data
    -k --key=<STRING>    STRING containing encrypted private key
    -s --stdout          use stdout to display decrypted data
    -q --qrcode          display in-terminal qrcode of the data
    -t --testnet         generate accounts to be used on the bitcoin testnet
    -h --help            display this help

Be extremely careful using the --stdout flag. Using this flag will display your decrypted data in the terminal.
"""

import sys
import getpass
import qrcode
import qrtools
import qrcode_terminal
import os

from docopt import docopt
from blessings import Terminal

from lockbox import decrypt, LockBoxException

from papyrus import (BitcoinAccount,
                     EthereumAccount,
                     PapyrusException,
                     )
from papyrus._version import get_versions

VERSION = get_versions()['version']
BITCOIN = 'bitcoin'
ETHEREUM = 'ethereum'

term = Terminal()

def generate(account_type,
             address_file=None,
             key_file=None,
             stdout_qrcode=False,
             testnet=False,
             ):
    if account_type == BITCOIN:
        account = BitcoinAccount.generate(testnet=testnet)
    elif account_type == ETHEREUM:
        if testnet:
            raise PapyrusException('Ethereum testnet is not supported')
        account = EthereumAccount.generate()
    else:
        raise PapyrusException('Invalid account type: {}'.format(account_type))

    passphrase = getpass.getpass('Enter passphrase: ')
    confirmed_passphrase = getpass.getpass('Confirm passphrase: ')

    if passphrase != confirmed_passphrase:
        raise PapyrusException('Passphrases do not match')

    encrypted_key = account.encrypted_priv_key(passphrase)

    print()
    print('Encrypted Private Key: ')
    print(encrypted_key.decode('utf-8'))

    if key_file:
        if os.path.splitext(key_file)[1].lower() == '.png':
            img = qrcode.make(encrypted_key)
            img.save(key_file)
        else:
            with open(key_file, 'wb') as f:
                f.write(encrypted_key)

    if stdout_qrcode:
        print()
        qrcode_terminal.draw(encrypted_key)

    print()
    print('Address: ')
    print(account.address())

    if address_file:
        if os.path.splitext(address_file)[1].lower() == '.png':
            img = qrcode.make(account.address())
            img.save(address_file)
        else:
            with open(address_file, 'wb') as f:
                f.write(account.address())

    if stdout_qrcode:
        print()
        qrcode_terminal.draw(account.address())


def recover(data,
            key_file=None,
            stdout=False,
            stdout_qrcode=False):
    passphrase = getpass.getpass('Enter passphrase: ')

    plain_data = decrypt(passphrase, data)

    if key_file:
        if os.path.splitext(key_file)[1].lower() == '.png':
            img = qrcode.make(plain_data)
            img.save(key_file)
        else:
            with open(key_file, 'wb') as f:
                f.write(plain_data)

    if stdout:
        print()
        print('Private Key:')
        print(plain_data.decode('utf-8'))

    if stdout_qrcode:
        print()
        qrcode_terminal.draw(plain_data)

def qrcode_func(data,
                output=None,
                stdout_qrcode=False):
    if output:
        img = qrcode.make(data)
        img.save(output)
        print('Data written to {}'.format(output))

    if stdout_qrcode:
        print()
        qrcode_terminal.draw(data)

def get_data(data=None,
             data_file=None,
             ):
    if not data:
        if data_file:
            if data_file == '-':
                data = sys.stdin.read().encode('utf-8')
            else:
                if not os.path.exists(data_file):
                    raise PapyrusException('{} was not found'.format(data_file))

                if os.path.splitext(data_file)[1].lower() == '.png':
                    qr = qrtools.QR()
                    qr.decode(data_file)
                    data = qr.data
                else:
                    with open(data_file, 'rb') as f:
                        data = f.read()
        else:
            data = sys.stdin.read().encode('utf-8')
    return data

if __name__ == '__main__':
    args = docopt(__doc__, version=VERSION)

    if args['--version']:
        print(VERSION)
    else:
        account_type = args['<ACCOUNT_TYPE>'].lower() if args['<ACCOUNT_TYPE>'] else None

        address_file = args['--address']
        output = args['--output']
        stdout_qrcode = args['--qrcode']

        testnet = args['--testnet']

        key = args['--key']
        key_file = args['<ENCRYPTED_KEY_FILE>']

        decrypted_key_file = args['<DECRYPTED_KEY_FILE>']

        stdout = args['--stdout']

        data_file = args['<FILE>']

        try:
            if args['generate']:

                generate(account_type,
                         address_file=address_file,
                         key_file=output,
                         stdout_qrcode=stdout_qrcode,
                         testnet=testnet)
            elif args['recover']:
                data = get_data(data=key,
                                data_file=key_file,
                                )

                if not (decrypted_key_file or
                        stdout or
                        stdout_qrcode):
                    print(term.red('No outputs have been provided'))
                    print(term.red('Either provide <decrypted_key_file> or --decrypted_key_qrcode=<FILE> for output'))
                    print(__doc__)
                else:
                    try:
                        recover(data,
                                key_file=decrypted_key_file,
                                stdout=stdout,
                                stdout_qrcode=stdout_qrcode)
                    except LockBoxException as e:
                        raise PapyrusException(str(e))
            elif args['qrcode']:
                data = get_data(data_file=data_file)
                qrcode_func(data,
                            output=output,
                            stdout_qrcode=stdout_qrcode)
            else:
                print(__doc__)
        except PapyrusException as e:
            print(term.red(str(e)))
        except KeyboardInterrupt:
            print(term.red('Aborted'))
